-- Создаем БД
CREATE DATABASE `YetiCave` /*!40100 COLLATE 'utf8mb4_unicode_ci' */;

-- Создаем таблицу категории
CREATE TABLE `categories` (
	`id_categoty` INT(8) UNSIGNED ZEROFILL NOT NULL AUTO_INCREMENT,
	`name_category` VARCHAR(128) NOT NULL,
	`code_category` VARCHAR(128) NOT NULL,
	PRIMARY KEY (`id_categoty`)
)
COLLATE='utf8mb4_unicode_ci'
;

-- Создаем таблицу Пользователи
CREATE TABLE `users` (
	`id_user` INT(8) UNSIGNED ZEROFILL NOT NULL AUTO_INCREMENT,
	`user_name` VARCHAR(50) NOT NULL,
	`user_email` VARCHAR(50) NOT NULL,
	`user_password` VARCHAR(50) NOT NULL,
	`user_phone` VARCHAR(13) NOT NULL,
	`user_sing_date` TIMESTAMP NOT NULL DEFAULT CURRENT_TIMESTAMP,
	PRIMARY KEY (`id_user`)
)
COLLATE='utf8mb4_unicode_ci'
;

-- Создаем таблицу Лоты
CREATE TABLE `lots` (
	`id_lot` INT(8) UNSIGNED ZEROFILL NOT NULL AUTO_INCREMENT,
	`lot_data_create` TIMESTAMP NOT NULL,
	`lot_name` VARCHAR(125) NOT NULL COLLATE 'utf8mb4_unicode_ci',
	`lot_discription` VARCHAR(255) NULL DEFAULT NULL COLLATE 'utf8mb4_unicode_ci',
	`lot_img` VARCHAR(255) NOT NULL COLLATE 'utf8mb4_unicode_ci',
	`lot_start_price` FLOAT NOT NULL,
	`lot_data_close` TIMESTAMP NOT NULL,
	`lot_stamp` FLOAT NOT NULL,
	`lot_id_autor` INT(8) UNSIGNED ZEROFILL NOT NULL,
	`lot_id_vinner` INT(8) UNSIGNED ZEROFILL NOT NULL,
	`lot_id_category` INT(8) UNSIGNED ZEROFILL NOT NULL,
	PRIMARY KEY (`id_lot`) USING BTREE,
	INDEX `FK_lot_autor_user` (`lot_id_autor`) USING BTREE,
	INDEX `FK_lot_vinner_user` (`lot_id_vinner`) USING BTREE,
	INDEX `FK_lot_category_category` (`lot_id_category`) USING BTREE,
	CONSTRAINT `FK_lot_autor_user` FOREIGN KEY (`lot_id_autor`) REFERENCES `yeticave`.`users` (`id_user`) ON UPDATE CASCADE ON DELETE RESTRICT,
	CONSTRAINT `FK_lot_vinner_user` FOREIGN KEY (`lot_id_vinner`) REFERENCES `yeticave`.`users` (`id_user`) ON UPDATE CASCADE ON DELETE RESTRICT,
	CONSTRAINT `FK_lot_category_category` FOREIGN KEY (`lot_id_category`) REFERENCES `yeticave`.`categories` (`id_categoty`) ON UPDATE CASCADE ON DELETE RESTRICT
)
COLLATE='utf8mb4_unicode_ci'
ENGINE=InnoDB
;
